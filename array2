# 6companies30days

subarray sums divisible by k
https://leetcode.com/problems/subarray-sums-divisible-by-k/

class Solution:
    def subarraysDivByK(self, nums: List[int], k: int) -> int:
        running=count=0
        remainder=collections.defaultdict(int)
        
        remainder[0]=1
        for num in nums:
            running+=num
            if running%k in remainder:
                count+=remainder[running%k]
            remainder[running%k]+=1
        return count


find all duplicates in array
https://leetcode.com/problems/find-all-duplicates-in-an-array/submissions/877262857/

class Solution:
    def findDuplicates(self, nums: List[int]) -> List[int]:
        output=[]
        for n in nums:
            m=abs(n)
            if nums[m-1]<0:
                output.append(m)
            else:
                nums[m-1]*=-1
        return output

container with most water
https://leetcode.com/problems/container-with-most-water/

class Solution:
    def maxArea(self, height: List[int]) -> int:
        res=0
        l,r=0,len(height)-1
        while l<r:
            area=(r-l)*min(height[l],height[r])
            res=max(res,area)
            if height[l]<height[r]:
                l+=1
            else:
                r-=1
        return res

3 sum
https://leetcode.com/problems/3sum/

class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        res=[]
        nums.sort()
        for i,a in enumerate(nums):
            if i>0 and a==nums[i-1]:
                continue
            l,r=i+1,len(nums)-1
            while l<r:
                threeSum=a+nums[l]+nums[r]
                if threeSum>0:
                    r-=1
                elif threeSum<0:
                    l+=1
                else:
                    res.append([a,nums[l],nums[r]])
                    l+=1
                    while nums[l]==nums[l-1] and l<r:
                        l+=1
        return res
        
4sum
https://leetcode.com/problems/4sum/submissions/877807915/
class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        nums.sort()
        res,quad=[],[]
        def ksum(k,start,target):
            if k!=2:
                for i in range(start,len(nums)-k+1):
                    if i>start and nums[i]==nums[i-1]:
                        continue
                    quad.append(nums[i])
                    ksum(k-1,i+1,target-nums[i])
                    quad.pop()
                return
            l,r=start,len(nums)-1
            while l<r:
                if nums[l]+nums[r]<target:
                    l+=1
                elif nums[l]+nums[r]>target:
                    r-=1
                else:
                    res.append(quad+[nums[l],nums[r]])    
                    l+=1
                    while nums[l]==nums[l-1] and l<r:
                        l+=1
        ksum(4,0,target)
        return res

